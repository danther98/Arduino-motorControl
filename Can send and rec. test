void CANSender(){
    FLOAT_BYTE_UNION translation_measured_f;
    FLOAT_BYTE_UNION rotation_measured_f;
    translation_measured_f.value = (float)(DIRECTIONS[board_ID][TRANSLATION]*translation_stepper.getCurrentPositionInMillimeters());
    rotation_measured_f.value = (float)(DIRECTIONS[board_ID][ROTATION]*rotation_stepper.getCurrentPositionInRevolutions()*DEGREES_PER_REVOLUTION);
    if (SERIAL_ON && SERIAL_MESSAGES) Serial.print(F("Sent: (packet: 0b"));
    if (state == RUNNING) {
        INT8U id = 0b10010000 + (1 << board_ID);
        INT8U ext = 0; // Standard frame
        INT8U len = sizeof(float) * 2; // Length of data to be sent
        INT8U data_buf[sizeof(float) * 2]; // Buffer to hold the data

        // Copy the bytes of float values into the data buffer
        memcpy(&data_buf[0], &translation_measured_f.bytes[0], sizeof(float));
        memcpy(&data_buf[sizeof(float)], &rotation_measured_f.bytes[0], sizeof(float));

        CAN.sendMsgBuf(id, ext, len, data_buf); // Send the data buffer onto the CAN bus
        if (SERIAL_ON && SERIAL_MESSAGES) Serial.print(id, BIN);
    }
    else if (state == SHORT_CAN_WAIT || state == EMERGENCY_STOP || state == STOP_SWITCH || state == ZERO) {
        INT8U id = (1 << board_ID) + 0b10000000;
        INT8U ext = 0; // Standard frame
        INT8U len = sizeof(float) * 2; // Length of data to be sent
        INT8U data_buf[sizeof(float) * 2]; // Buffer to hold the data

        // Copy the bytes of float values into the data buffer
        memcpy(&data_buf[0], &translation_measured_f.bytes[0], sizeof(float));
        memcpy(&data_buf[sizeof(float)], &rotation_measured_f.bytes[0], sizeof(float));

        CAN.sendMsgBuf(id, ext, len, data_buf); // Send the data buffer onto the CAN bus
        if (SERIAL_ON && SERIAL_MESSAGES) Serial.print(id, BIN);
    } else {
        if (SERIAL_ON && SERIAL_MESSAGES) Serial.println(F("NON PRINT STATE"));
    }
    if (SERIAL_ON && SERIAL_MESSAGES) {
        Serial.print(F(" ROTATION: "));
        Serial.print(rotation_measured_f.value);
        Serial.print(F(" Translation: "));
        Serial.println(translation_measured_f.value);
    }
}


void CANReceiver() {
    if (CAN.checkReceive()) {
        receive_time = millis();
        FLOAT_BYTE_UNION translation_desired_f;
        FLOAT_BYTE_UNION rotation_desired_f;
        if (SERIAL_ON && SERIAL_MESSAGES) {
            Serial.print(F("Recv: (packet: 0b"));
            Serial.print(CAN.getCanId(), BIN);
            Serial.print(" ");
        }

        //EMERGENCY STOP
        if ((CAN.getCanId() & (0x1fffff00 + 0b11111111)) == 0b00001111) {
            if (SERIAL_ON) Serial.println(F("E STOP message received"));
            emergency_stop = true;
            evaluateState();
            return;
        } else {
            emergency_stop = false;
        }

        //zero
        if ((CAN.getCanId() & (0x1fffff00 + 0b11100000)) == 0b01000000) {
            if (SERIAL_ON) Serial.println(F("Zero message received"));
            state = ZERO;
            if (received_zero) state = LARGE_CAN_DELAY;
            received_zero = true;
            evaluateState();
            return;
        }

        if ((CAN.getCanId() & (0x1fffff00 + 0b11110000)) == 0b10000) {
            received_zero = false;
            unsigned char buf[8];
            CAN.readMsgBuf(&len, buf);
            if (len == 8) {
                int rotation_index = sizeof(float) - 1;
                int translation_index = sizeof(float) - 1;
                bool data_received = false;
                while (rotation_index >= 0 || translation_index >= 0) {
                    if (translation_index >= 0) {
                        translation_desired_f.bytes[translation_index--] = buf[len - 1];
                        len--;
                    } else if (rotation_index >= 0) {
                        rotation_desired_f.bytes[rotation_index--] = buf[len - 1];
                        len--;
                    } else {
                        if (SERIAL_ON && SERIAL_MESSAGES) Serial.println(F("DATA DROPPED)"));
                        return;
                    }
                    data_received = true;
                }
                if (data_received) {
                    rotation_desired = (double)rotation_desired_f.value / DEGREES_PER_REVOLUTION;
                    translation_desired = (double)translation_desired_f.value;
                    if (SERIAL_ON && SERIAL_MESSAGES) {
                        Serial.print(" Rotation: ");
                        Serial.print(rotation_desired * DEGREES_PER_REVOLUTION);
                        Serial.print(" Translation: ");
                        Serial.print(translation_desired);
                    }
                }
                if (SERIAL_ON && SERIAL_MESSAGES) Serial.println(F(")"));
            } else {
                if (SERIAL_ON && SERIAL_MESSAGES) Serial.println(F("LESS THAN 8 BYTES RECEIVED)"));
                return;
            }
        }
    }
}
